@using Humanizer.Localisation
@model IEnumerable<SmartDormitary.Data.Models.Sensor>

<div class="card card-nav-tabs text-center">
    @if (ViewData["ShowTitleCard"] != null && ViewData["CardTitle"] != null && (bool)ViewData["ShowTitleCard"])
    {
        <div class="card-header card-header-info">@ViewData["CardTitle"]</div>
    }
    <div class="card-body table-responsive">
        @if (@Model.Any())
        {
            <table class="table table-hover">
                <thead class="text-primary">
                <tr>
                    <th>
                        Name
                    </th>
                    <th>
                        Refresh Time
                    </th>
                    <th>
                        Is Public
                    </th>
                    <th>
                        Last Updated
                    </th>
                    <th>
                        Value
                    </th>
                    <th>
                        Min Value
                    </th>
                    <th>
                        Max Value
                    </th>
                    <th>
                        Notify
                    </th>
                    <th>
                        Type
                    </th>
                    <th>
                        User
                    </th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            <strong>
                                @*@{
                                    if (item.Value != "true" && item.Value != "false" &&
                                        item.MinAcceptableValue > double.Parse(item.Value) && item.MaxAcceptableValue < double.Parse(item.Value))
                                    {
                                        <span class="text-danger fas fa-exclamation-triangle" data-toggle="tooltip" title="Critical Value"></span>
                                    }
                                }*@
                                <a class="text-info" asp-action="Edit" asp-controller="Sensors" asp-route-id="@item.Id">@item.Name</a>
                            </strong>
                        </td>
                        <td>
                            <i>@TimeSpan.FromSeconds(item.RefreshTime).Humanize(minUnit: TimeUnit.Second, maxUnit: TimeUnit.Minute)</i>
                        </td>
                        <td>
                            <div class="form-check">
                                <label class="form-check-label">
                                    <input class="form-check-input" type="checkbox" disabled checked="@item.IsPublic">
                                    <span class="form-check-sign">
                                        <span class="check"></span>
                                    </span>
                                </label>
                            </div>
                        </td>
                        <td>
                            @*@{
                                if (item.Timestamp == null)
                                {
                                    <i>Never</i>
                                }
                                else
                                {
                                    <i>@TimeSpan.FromTicks(DateTime.Now.Subtract(item.Timestamp.Value).Ticks).Humanize(minUnit: TimeUnit.Second, maxUnit: TimeUnit.Minute) ago</i>
                                }
                            }*@
                        </td>
                        <td>
                            @{
                                @*if (String.IsNullOrEmpty(item.Value))
                                {
                                    <span>None</span>
                                }
                                else
                                {
                                    @Html.DisplayFor(modelItem => item.Value)@item.SensorType.MeasurementType
                                }*@
                            }
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MinAcceptableValue)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.MaxAcceptableValue)
                        </td>
                        <td>
                            <div class="form-check">
                                <label class="form-check-label">
                                    <input class="form-check-input" type="checkbox" disabled checked="@item.TickOff">
                                    <span class="form-check-sign">
                                        <span class="check"></span>
                                    </span>
                                </label>
                            </div>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.SensorType.Description)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.User.UserName)
                        </td>
                        <td class="h4">
                            <a asp-action="Edit" asp-controller="Sensors" asp-route-id="@item.Id"><i class="fa fa-edit text-info"></i></a> |
                            <a asp-action="Details" asp-controller="Sensors" asp-route-id="@item.Id"><i class="fa fa-search text-success"></i></a> |
                            <a asp-action="Delete" asp-controller="Sensors" asp-route-id="@item.Id"><i class="fa fa-times text-danger"></i></a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
        else
        {
            @await Html.PartialAsync("_StatusMessage", "Error: No Sensors Registered")
        }
    </div>
</div>