<style type="text/css">
    .editable {
        border-radius: 10px;
        background-color: antiquewhite;
    }

    .saveButton {
        visibility: hidden;
    }

    button.editButton, button.saveButton {
        margin: 10px;
    }
</style>

@model SensorViewModel
@{
    ViewData["Title"] = "Details";
}

<h2>Details</h2>
<br />
<div class="updateForm">
    <div class="form-row">
        <div class="form-group col-md-6">
            <p><span class="font-weight-bold">Sensor Name:</span> @Model.Name</p>
            <p><span class="font-weight-bold">Description:</span> @Model.Description</p>
            <p><span class="font-weight-bold">Pulling Interval:</span> @Model.PullingInterval</p>
            <div class="form-row">
                <div class="col-md-6">
                    <p><span class="font-weight-bold">Sensor Value:</span> @Model.Value</p>
                    <p><span class="font-weight-bold">Time stamp:</span> @Model.Timestamp</p>
                </div>
                <canvas id="foo" class="col-md-6"></canvas>
            </div>
        </div>
        <div class="form-group col-md-1"></div>
        <div class="form-group col-md-5">
            @if (User.Identity.Name == Model.User.UserName)
            {
                <div class="form-row">
                    <button type="reset" class="btn btn-primary editButton"><i class="fas fa-edit"></i> <span>Edit Content</span></button>
                    <button type="reset" class="btn btn-primary saveButton"><i class="fas fa-save"></i> <span>Save</span></button>
                </div>
            }
            <br />

            <div id="map" style="height: 300px;"></div>
        </div>
    </div>
</div>

<script type="text/javascript" src="~/lib/gaugejs/gauge.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        var opts = {
            angle: -0.15, // The span of the gauge arc
            lineWidth: 0.3, // The line thickness
            radiusScale: 1, // Relative radius
            pointer: {
                length: 0.63, // // Relative to gauge radius
                strokeWidth: 0.064, // The thickness
                color: '#000000' // Fill color
            },
            limitMax: false,     // If false, max value increases automatically if value > maxValue
            limitMin: false,     // If true, the min value of the gauge will be fixed
            colorStart: '#6FADCF',   // Colors
            colorStop: '#8FC0DA',    // just experiment with them
            strokeColor: '#E0E0E0',  // to see which ones work best for you
            generateGradient: true,
            highDpiSupport: true,   // High resolution support
            staticZones: [
                { strokeStyle: "#F03E3E", min: '@Model.Type.MinAcceptableValue' * 1, max: '@Model.MinAcceptableValue' * 1 }, // Red from 100 to 130
                { strokeStyle: "#30B32D", min: '@Model.MinAcceptableValue' * 1, max: '@Model.MaxAcceptableValue' * 1 }, // Green
                { strokeStyle: "#F03E3E", min: '@Model.MaxAcceptableValue' * 1, max: '@Model.Type.MaxAcceptableValue' * 1 }  // Red
            ],
        };
        var target = document.getElementById('foo'); // your canvas element
        var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!
        gauge.colorStart = '#E0E0E0';
        gauge.minValue = '@Model.Type.MinAcceptableValue' * 1;
        gauge.maxValue = '@Model.Type.MaxAcceptableValue' * 1;
        gauge.animationSpeed = 93; // set animation speed (32 is default value)
        gauge.set('@Model.Value' * 1); 
    })


        $(function () {
            const oldValues = [];
            let restore = false;

            $('.editButton').click(function () {
                let $fields = $('.editableField');

                if (!restore) {
                    $fields.each((i, e) => {
                        oldValues.push(e.innerHTML)
                    })
                    $('.saveButton').css("visibility", "initial");
                    $('.editButton > span').text("Cancel");
                } else {
                    $fields.each((i, e) => {
                        e.innerHTML = oldValues[i];
                    });

                    oldValues.length = 0;
                    $('.saveButton').css("visibility", "hidden");
                    $('.editButton > span').text("Edit Content");
                }

                restore = !restore;
                var isEditable = $fields.is('.editable');
                $fields.prop('contenteditable', !isEditable).toggleClass('editable');
            })

            $('.saveButton').click(function () {
                let $fields = $('.editableField');
                var isEditable = $fields.is('.editable');

                oldValues.length = 0;
                restore = !restore;

                let id = '@Model.Id';
                let name = $fields[0].innerHTML;
                let description = $fields[1].innerHTML;

                $.post("/Sensor/UpdateSensor", {
                    Id: id,
                    Name: name,
                    Description: description,
                    Latitude: '@Model.Latitude',
                    Longitude: '@Model.Longitude',
                    IsPublic: '@Model.IsPublic',
                    MinAcceptableValue: '@Model.MinAcceptableValue',
                    MaxAcceptableValue: '@Model.MaxAcceptableValue',
                    Value: '@Model.Value',
                    PullingInterval: '@Model.PullingInterval',
                    TickOff: '@Model.TickOff',
                    Timestamp: '@Model.Timestamp'
                },
                    function (data, status) {
                        alert("Data: " + data + "\nStatus: " + status);
                    });


                $('.saveButton').css("visibility", "hidden");
                $('.editButton > span').text("Edit Content");
                $fields.prop('contenteditable', !isEditable).toggleClass('editable');
            })
        });

    function initMap() {
        let modelLat = '@Model.Latitude' * 1;
        let modelLtd = '@Model.Longitude' * 1;

        var myLatLng = { lat: modelLat, lng: modelLtd };

        var map = new google.maps.Map(document.getElementById('map'),
            {
                zoom: 12,
                center: myLatLng
            });

        new google.maps.Marker({
            position: myLatLng,
            map: map,
            title: '@Model.Name'
        });
    };

</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDOc4hXPYpMR4Gos817M6Iz_5hUKrPE0k4&callback=initMap"></script>




