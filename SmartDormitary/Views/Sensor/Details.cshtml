<style type="text/css">
    .editable {
        border-radius: 10px;
        background-color: antiquewhite;
    }

    .saveButton {
        visibility: hidden;
    }

    button.editButton, button.saveButton {
        margin: 10px;
    }
</style>

@model SensorViewModel
@{
    ViewData["Title"] = "Details";
}

<h2>Details</h2>

<div class="updateForm">
    <div class="form-row">
        <div class="form-group col-md-6">
            <table class="table table-condensed">
                <tr>
                    <td>Sensor Name:</td>
                    <td class="editableField">@Model.Name</td>
                </tr>
                <tr>
                    <td>Description:</td>
                    <td class="editableField">@Model.Description</td>
                </tr>
                <tr>
                    <td>Pulling Interval:</td>
                    <td>@Model.PullingInterval</td>
                </tr>
                <tr>
                    <td>Sensor Value:</td>
                    <td>@Model.Value</td>
                </tr>
                <tr>
                    <td>Time stamp:</td>
                    <td>@Model.Timestamp</td>
                </tr>
            </table>
        </div>
        <div class="form-group col-md-1"></div>
        <div class="form-group col-md-5">
            @if (User.Identity.Name == Model.User.UserName)
            {
                <div class="form-row">
                    <button type="reset" class="btn btn-primary editButton"><i class="fas fa-edit"></i> <span>Edit Content</span></button>
                    <button type="reset" class="btn btn-primary saveButton"><i class="fas fa-save"></i> <span>Save</span></button>
                </div>
            }
            <br />

            <div id="chart_div" style="width: 400px; height: 120px;"></div>
            <div id="map" style="height: 300px;"></div>
        </div>
    </div>
</div>

<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script type="text/javascript">
    google.charts.load('current', { 'packages': ['gauge'] });
    google.charts.setOnLoadCallback(drawChart);

        $(function () {
            const oldValues = [];
            let restore = false;

            $('.editButton').click(function () {
                let $fields = $('.editableField');

                if (!restore) {
                    $fields.each((i, e) => {
                        oldValues.push(e.innerHTML)
                    })
                    $('.saveButton').css("visibility", "initial");
                    $('.editButton > span').text("Cancel");
                } else {
                    $fields.each((i, e) => {
                        e.innerHTML = oldValues[i];
                    });

                    oldValues.length = 0;
                    $('.saveButton').css("visibility", "hidden");
                    $('.editButton > span').text("Edit Content");
                }

                restore = !restore;
                var isEditable = $fields.is('.editable');
                $fields.prop('contenteditable', !isEditable).toggleClass('editable');
            })

            $('.saveButton').click(function () {
                let $fields = $('.editableField');
                var isEditable = $fields.is('.editable');

                oldValues.length = 0;
                restore = !restore;

                let id = '@Model.Id';
                let name = $fields[0].innerHTML;
                let description = $fields[1].innerHTML;

                $.post("/Sensor/UpdateSensor", {
                    Id: id,
                    Name: name,
                    Description: description,
                    Latitude: '@Model.Latitude',
                    Longitude: '@Model.Longitude',
                    IsPublic: '@Model.IsPublic',
                    MinAcceptableValue: '@Model.MinAcceptableValue',
                    MaxAcceptableValue: '@Model.MaxAcceptableValue',
                    Value: '@Model.Value',
                    PullingInterval: '@Model.PullingInterval',
                    TickOff: '@Model.TickOff',
                    Timestamp: '@Model.Timestamp'
                },
                    function (data, status) {
                        alert("Data: " + data + "\nStatus: " + status);
                    });


                $('.saveButton').css("visibility", "hidden");
                $('.editButton > span').text("Edit Content");
                $fields.prop('contenteditable', !isEditable).toggleClass('editable');
            })
        });

    function initMap() {
        let modelLat = '@Model.Latitude' * 1;
        let modelLtd = '@Model.Longitude' * 1;

        var myLatLng = { lat: modelLat, lng: modelLtd };

        var map = new google.maps.Map(document.getElementById('map'),
            {
                zoom: 12,
                center: myLatLng
            });

        new google.maps.Marker({
            position: myLatLng,
            map: map,
            title: '@Model.Name'
        });
    };

    function drawChart() {

        var data = google.visualization.arrayToDataTable([
            ['Label', 'Value'],
            ['Memory', '@Model.Type.MaxAcceptableValue' * 1]
        ]);

        var options = {
            width: 100, height: 100,
            @if (Model.Type.MaxAcceptableValue > 1)
            {
                @:redFrom: '@Model.MaxAcceptableValue' * 1, redTo: '@Model.Type.MaxAcceptableValue' * 1,
                @:redFrom: '@Model.MinAcceptableValue' * 1, redTo: '@Model.Type.MinAcceptableValue' * 1,
            }
        };

        var chart = new google.visualization.Gauge(document.getElementById('chart_div'));

        chart.draw(data, options);
    };
</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDOc4hXPYpMR4Gos817M6Iz_5hUKrPE0k4&callback=initMap"></script>




